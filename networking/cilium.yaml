---
# Source: cilium/templates/cilium-agent-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: cilium-operator
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hubble-relay
  namespace: kube-system
---
# Source: cilium/templates/hubble-ui-serviceaccount.yaml
apiVersion: v1
kind: ServiceAccount
metadata:
  name: hubble-ui
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-client-tls-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-relay-client-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURNRENDQWhpZ0F3SUJBZ0lSQU1BL0ZvcGJROVNLOG5HOWFUTG5BTUV3RFFZSktvWklodmNOQVFFTEJRQXcKSGpFY01Cb0dBMVVFQXhNVGFIVmlZbXhsTFdOaExtTnBiR2wxYlM1cGJ6QWVGdzB5TURFeU1qQXdNREF4TVRsYQpGdzB5TXpFeU1qQXdNREF4TVRsYU1DTXhJVEFmQmdOVkJBTU1HQ291YUhWaVlteGxMWEpsYkdGNUxtTnBiR2wxCmJTNXBiekNDQVNJd0RRWUpLb1pJaHZjTkFRRUJCUUFEZ2dFUEFEQ0NBUW9DZ2dFQkFOT0FHckV1c3FvOUwzVWQKc0JzeEZjS0h4cEQvQi9SRXptSnVsM09penpRZVJjOGVKSFVnc1o3TXpoNzdlUWJXckMwUmhMN1d5SVNYb2pmcgpsbzJzcWNOdC82Y0prdmhNNUY4MVhYYkE3R2ZWRmsyeGNzcnlnZUdOQUlCUzgzV2ZSU1hqcmFBY05pV0QvZlRZCjVHcnNmLzByYVFwbHNqQzBWZzR2RFR3a29EZkttUkJtVFpKYnJRRFMyNnpOdGZtQkFDL1VBNUlDY0plY3FpaW0KUFJ6eThMQklkSENNb0Z3U3Bua3R3QlhCQWJ3OFhNODlMQWZSUmQxMXVtSVg4NlhNRU9sRnkxR2ZhWUlBbE9EMQovNEw1WTlMY3RWdkExZzVKaDA4MnZjWW5rTGgraTZrR3R5ajZEa21tQmlhQXp5VXFQREgxelpTZVJGbGFxU0ZjCklubDRsUE1DQXdFQUFhTmtNR0l3RGdZRFZSMFBBUUgvQkFRREFnV2dNQjBHQTFVZEpRUVdNQlFHQ0NzR0FRVUYKQndNQkJnZ3JCZ0VGQlFjREFqQU1CZ05WSFJNQkFmOEVBakFBTUNNR0ExVWRFUVFjTUJxQ0dDb3VhSFZpWW14bApMWEpsYkdGNUxtTnBiR2wxYlM1cGJ6QU5CZ2txaGtpRzl3MEJBUXNGQUFPQ0FRRUFpU2Fhbkw3OWtjUjZHTXBoCmlxWnhRWEdTN1I1eEhqWUlqQUREbHE4NWd3SkQ1SVUwZldzTHp3KzNWaGVoejBLYVErUEQwa0F1d094ejdtcjEKanQwRkdDZEVQbTVQNkZETFB1MXEvMktoblgrc3UwYmFvYldnM0xiK25QMm85V0dHdTVqOWYxeUY2bFNWZGNISApPTlZCQ3p3Qy8xRjQ2ZUtMR0lVdzdIOFFOc0JkNk1DL1BtV3pnY2tZQTBZeCtrWDBaUEZ2bVJGRWJ3K1kzbHcvCmd5S28rQi9sS2R1OGt6M2F0ZFhLYzQxcDhqQzFKa2VsTEJYRGVLV3BSVlNWV1RzK2FzQlRFeXp3cWhYUzVSZmsKS3FxNWZ1UE9VdlNzU1B3bzA5OFZMNXRQMmg0WVhwL2F1Y29uVzJTVmZhL0NBOEIwZW1QaFR4ZmpJK29KY3VnVwpVUHljOFE9PQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb3dJQkFBS0NBUUVBMDRBYXNTNnlxajB2ZFIyd0d6RVZ3b2ZHa1A4SDlFVE9ZbTZYYzZMUE5CNUZ6eDRrCmRTQ3huc3pPSHZ0NUJ0YXNMUkdFdnRiSWhKZWlOK3VXamF5cHcyMy9wd21TK0V6a1h6VmRkc0RzWjlVV1RiRnkKeXZLQjRZMEFnRkx6ZFo5RkplT3RvQncySllQOTlOamthdXgvL1N0cENtV3lNTFJXRGk4TlBDU2dOOHFaRUdaTgprbHV0QU5MYnJNMjErWUVBTDlRRGtnSndsNXlxS0tZOUhQTHdzRWgwY0l5Z1hCS21lUzNBRmNFQnZEeGN6ejBzCkI5RkYzWFc2WWhmenBjd1E2VVhMVVo5cGdnQ1U0UFgvZ3ZsajB0eTFXOERXRGttSFR6YTl4aWVRdUg2THFRYTMKS1BvT1NhWUdKb0RQSlNvOE1mWE5sSjVFV1ZxcElWd2llWGlVOHdJREFRQUJBb0lCQURDVkJveVltM1c3WkVGVQp0blVvaTBVS0J6U2JRR3A5dTZLa29LbHhSb05FU09qUWxiTko5VUx5N0kzMVdkR1dVaXB3RWJ2OGZrYm14ZDV1CmdVQzkzcWtEaFd3TEtQVmNSRUVTY3d1cU9TT0lzUHpidS9DZVQvTk5ma1g3eCt6R3p3MXJCU0Q0R2YvNEY4ZTgKWW91bEU2bEY1WFQ3OHpoNDFDT2g3enBYZDI0WThxT1EyV0hoZ1VkOGRNSExwKytOVmhUank2ZWNsaWpCYVc4KwpqdHJVa0J3bmswZUh0UjhycmsydEtDa3ZZcGhNWE82RnVrTXpiSzRSTUlGekxReDU0L2RlSG9FSjJxQVRYUERaCjlnWTZXaGNaaWxyUVhqVkVydEpCbFhMZUtnczczd3I2MjM0U05ObUczWi9ESWNTVjd5ZVpxMnNEcUlyM2hBYnYKNWZGbkZSRUNnWUVBNEdmVjhGMTcxL2RkenJJa3dXRm9PNjkwenh1U3pyL2c2Nk9EdWhwQ3BBRHB5ZkhsczBlcgp1Q1RXdkRDeW4zU1ZHaUpadkt5Z2xLcjFtVDVLZ0p3b1pXSW1XMGdJZkhVTlJiK1ZnVFg3YkxpRWNSQlNlV1hXCjZrdHc0QW94N2J5bVdtcEM4K1hZU0FMZzFnRUFhZmVaMldYY3NZQzljcExZQjduVjczZUtNQWNDZ1lFQThVY2gKcEhzZ01mQVc4RHhUOTMrZkRIK281YlFYL1hINjVqTVp4TzhidVZadnlIazZRQTBrNUFqN0h0d05ENnc5eFpGMgo1Sk56RlY0MDYrK1o2aFRxUERCVFZ5ZmpIYmlyNzl5NlJHazI5a3ZFMXIxU1FHYXdndnI5d0VYcURyVGRma3lrCmtSU1RmY1VPdSt1cmtDTjN4RFplUEl2aVpEYzRySVNzUGhLdVlMVUNnWUVBbFF0aVJPdFNQZmJHRDJxeWp0NHIKWkxqOFZESjBKMjI1N2NnRXphNXpaSXBXdlJJMUJnWXNQM240UmJYeWJZWDVJZ3ArbjVub2JkVyttYkdOdWkzOQpocGpSOFA2KzVDcTZUZ0VaUTJDZlJXNm9TSkFXdHhxMHk1aWZ0NjROeTJEby9GUm5jNmJOSjhjQm5pRzhMS1dQClFaMHVINWJxUFJiYTlRYXcyUVFFZkRFQ2dZQlJGL0pEd1NwWi9uTUhQWStQTVBLNUZiTWp1VHNTOFJzK0FkRFkKY3ZFamd0ekJTWlY5YjYyRmcwczczUVA2ejQ1WGVBTzQ0YUlkZlhOV0ZVcnE5U3FoSGpEMHF6QlhqZmtqL2xFUQpxemhRNGJoLzRGUGoxMS9lTmhQUmF1NDNFUzBjeFEvT3YxYXZQK3NxMkJQcXR6RUszcWNmdkhoVDdJZDgzSDZ6CndqMmZ2UUtCZ0FDOVo2dEFCd29OS1IrbnNpbkhMd1lPM1RYWUwyZ0xxd3RocklUeFRBeHdYV0drc09KL1lXd2oKcUZROC9ETTVmejl2L1ZqbFV4UnAyNWFHd2Q1WklKUzEzejQrbEwzSFdva0M3VFM4NFlOUjNMSzRHM1NjUnZEUgo0UHF2SjF2ZHU0cEpYM0JIczl0dERuY3hJdnltRHdKZjUzVUdxKzA5Z3JqMzh2UjQ4VGM1Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/hubble-server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: hubble-server-certs
  namespace: kube-system
type: kubernetes.io/tls
data:
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURQVENDQWlXZ0F3SUJBZ0lRQ1RwK3dyZnNBdXdBWE0wZ1RGdDVhakFOQmdrcWhraUc5dzBCQVFzRkFEQWUKTVJ3d0dnWURWUVFERXhOb2RXSmliR1V0WTJFdVkybHNhWFZ0TG1sdk1CNFhEVEl3TVRJeU1EQXdNREV4T1ZvWApEVEl6TVRJeU1EQXdNREV4T1Zvd0tqRW9NQ1lHQTFVRUF3d2ZLaTVrWldaaGRXeDBMbWgxWW1Kc1pTMW5jbkJqCkxtTnBiR2wxYlM1cGJ6Q0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUpsR09TK1EKS05ZdjE4SkRIcGk4ODh4MXd0c2RqN2FDd2JVS2VBNlBlNVNBcy83NFJMcHQ1Y29Db1dRZXBFeGJpQ053N3M0TQo0QWdqa1B1UXlBY1Q4TjRZa29BVXQ5bWd3RzRIRlBUMzhmMUVVNnVXYkZXY1lDbTduNjhUQWZKeVFxNjFVYzFEClVhUEh1M3J3QXhhVGh3OUl0c2s0V3FlNGhDMUtYR1ROeWgzM2ZHWmRkUC9ubVBaQTNqdGdWeFcya2NvMVlheWUKNnM1Z1ZIaWxWV0tpRTZ2TlBpbm5lVlRZNlRQNGFWTElrWU5MZXM2YlBVTFBsUEVBZE0rV1lkb0ZEaEhmRDVJdgoyRC93VVNrbkZIMjhSR1lXOStOSWhIcnpMRWxPZy9WNzZpaFZUNUVsd0dpS1BuMG9vcU5xdDhOUnNpZjFQQ3BaCmNHS1lJUEhTUGhWN0hjc0NBd0VBQWFOck1Ha3dEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CMEdBMVVkSlFRV01CUUcKQ0NzR0FRVUZCd01CQmdnckJnRUZCUWNEQWpBTUJnTlZIUk1CQWY4RUFqQUFNQ29HQTFVZEVRUWpNQ0dDSHlvdQpaR1ZtWVhWc2RDNW9kV0ppYkdVdFozSndZeTVqYVd4cGRXMHVhVzh3RFFZSktvWklodmNOQVFFTEJRQURnZ0VCCkFNK3piclBQWE9CZXRUNUFVSlp5NVBORUx3WktJOTBZVms2MFJ4UTNMMVVBbkJQeXRab2JwWEV0cXBCNjlmc3IKQ3dCV2pYaGYrOElFdnc5c1hib2xtZ0FzYmcyT0t3UzZhdlJjc09nWVV4WEpPZVowTklEeUlsM0RPeVoyQ2VOagpleTBKWTA3ZFVaQkoxYnV2b1gzbUFvRlM2YmZjMjZwOER0b0dOSmVWTGJ2TEE3ZE9iU3Q1QVA0WWRlVVpkY21TCm1HQldVS1U1RUwyVHNFa1RWbVZtcStacFBlV0ZSUFRpS0tMQldSNld3WmpOTk9GQld1dWRWOTZDUTg4N3lVR0UKKzVXRVd2THBzK01ZalJRSkF3dnR6YlkvREtHc3o0R2hueXdYQXZsN3ZCY1Jic1RwQ25hMHdzWU5VZUpNZC8vdgozSEpXbEl0aHZIREcycjVEY0FlUGtMTT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=
  tls.key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFb2dJQkFBS0NBUUVBbVVZNUw1QW8xaS9Yd2tNZW1Menp6SFhDMngyUHRvTEJ0UXA0RG85N2xJQ3ovdmhFCnVtM2x5Z0toWkI2a1RGdUlJM0R1emd6Z0NDT1ErNURJQnhQdzNoaVNnQlMzMmFEQWJnY1U5UGZ4L1VSVHE1WnMKVlp4Z0tidWZyeE1COG5KQ3JyVlJ6VU5SbzhlN2V2QURGcE9IRDBpMnlUaGFwN2lFTFVwY1pNM0tIZmQ4WmwxMAovK2VZOWtEZU8yQlhGYmFSeWpWaHJKN3F6bUJVZUtWVllxSVRxODArS2VkNVZOanBNL2hwVXNpUmcwdDZ6cHM5ClFzK1U4UUIwejVaaDJnVU9FZDhQa2kvWVAvQlJLU2NVZmJ4RVpoYjM0MGlFZXZNc1NVNkQ5WHZxS0ZWUGtTWEEKYUlvK2ZTaWlvMnEzdzFHeUovVThLbGx3WXBnZzhkSStGWHNkeXdJREFRQUJBb0lCQURjZy91aVFuVitNamJvZApraCsxdHFyUG9HcFhVNTE5b2xhUGtXY0xUSk81UndScUg2NCtZT3dyemdqSXpLZDZOSmtxd1huelA1RXQyYlBoCisxQXdaKzQ2UUZjNUhIZDJUa0JFNDlESWJZMSt5ZWxwalVXdG5SamxseVhOWEdIcm52aGYxekJSQ2tneVNzaUoKRTFOSGRNaVdpc2dOTU80cWU4QWVndVR1NzhlZThlR0FQNExySnpHTVpzQi9EU01GNFE2elFoV2JkSTkrbFJhawpEanJweGNxNnZMaDZORVkwdG5HeldqdnZwdHBzUGdpNDFBelgzbWtUQlI3Tndsc1ZSeEFqWnBKV0FaTTdXS0JsCjZmQnNnZWp0ZkVPUWdVVjVSOFp1TXZCajQ1RTRtU0l5dWwxSzFac3JVSjFWUThubHBxajBzWGxRamdEbWxoR0IKTFFMeGVTRUNnWUVBd1R4aVZEQlpkVTFKdUp3bHYyWmovWm1oUFowa2g5V0hoWUlCSXFxWjkrVEhwd0IyWHVCSwoyR3o1OWRDaitKUENLTCtxMndXK05vY1o3dzlJTUxDOXcxVGt6NFEyN0RpcEExQ2huMThRcU1LZjMxc3VUNUdRCmE4MFlITm9vR0s1V2xVMVpZVjk0OU9EdG9SelB0VEQ5blZyM28xVHNUNEltSUl3dldjb0d4SWNDZ1lFQXl3OEcKTWRsTTlFMGlmNGt2UEpEV1lRMlB2cWl0MTFISDNDZ0ZsWThuUDVGU2t4WkFuVmIxN1VKdlVBWkZhS1pZOXlBRwpHSlpYT3dyS3NqY2hON1kwemxtazBLYnNVekF3dDFML2x0a3VWMVZHL2tnYTJXY1R6aXdnN1llWWxoK2ltemVpCjRPekdNSHE2S1VTQ3dmQ2Z3QVN3Z1hEQUp2eDFack5SVXpNRGNaMENnWUFweGp3YnB6Z3Z1NzJzUTFXRncwVHEKbGtQZFpoTjNxaG5hS3ZqRDNjM2JZWUlvQUZtV3VUWjFBMW9tWWl5UW1LRG8za2E1Z3N4VVRYQzExYi90aHNmLwphbUxzMmRCbDBQbjQxWDJiVHBuellkL2VFWUE1ZzJhTlo1Rkc2NEt2azBEMGxmdzBxTWNsYVZyMThaeVZ0em1jCnd3VzJNYTNFb29aTGt3TEpqbnRZRVFLQmdHalphU2wwT3ZncW5CV2VrSFdGbEN5cEJBQSt1UVRsaFgxNGJPbTgKOFZjeGdxSFFhNnpTcWtuSWRCR3VLMGpPSEVIK2x5YzYrZS9Tc3JjeklFUFVJWkFyV1o4amtnT2lib1U2cGg4TwpKWStTeVFXajFibE1NRDNWSzJ0N0NKNzcxc3F1Lzd1RWh4R2hUVjdoc1dMVERLbnB3Zm9VYmlPeldDdWZpKzZaCitMMUJBb0dBWnUxclZleXdTaEhaeWs4UVlab0ZsckhUQVFXUnViRnRLdXNBdDJZVnlOL2F6aTE1eGJ4OUtONEoKVjUyZEgxbHgrNUV6WmxPaFQvcWtUb09UM254VzA0aGQvNkNlQnhjRCtKSXJ3YVJZbzFDazVoTWdkdXYwWjJYTgpJWmJMdDhWVUlrSEJOQXZNSy9yVm9sa1FwcWdBZXkyUXJncVM4YkRVSFFxdmJOSTFKVjA9Ci0tLS0tRU5EIFJTQSBQUklWQVRFIEtFWS0tLS0tCg==
---
# Source: cilium/templates/cilium-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: cilium-config
  namespace: kube-system
data:
  disable-envoy-version-check: "true"

  # Identity allocation mode selects how identities are shared between cilium
  # nodes by setting how they are stored. The options are "crd" or "kvstore".
  # - "crd" stores identities in kubernetes as CRDs (custom resource definition).
  #   These can be queried with:
  #     kubectl get ciliumid
  # - "kvstore" stores identities in a kvstore, etcd or consul, that is
  #   configured below. Cilium versions before 1.6 supported only the kvstore
  #   backend. Upgrades from these older cilium versions should continue using
  #   the kvstore by commenting out the identity-allocation-mode below, or
  #   setting it to "kvstore".
  identity-allocation-mode: crd
  cilium-endpoint-gc-interval: "5m0s"

  # If you want to run cilium in debug mode change this value to true
  debug: "false"
  # If you want metrics enabled in all of your Cilium agents, set the port for
  # which the Cilium agents will have their metrics exposed.
  # This option deprecates the "prometheus-serve-addr" in the
  # "cilium-metrics-config" ConfigMap
  # NOTE that this will open the port on ALL nodes where Cilium pods are
  # scheduled.
  prometheus-serve-addr: ":9090"
  # Port to expose Envoy metrics (e.g. "9095"). Envoy metrics listener will be disabled if this
  # field is not set.
  proxy-prometheus-port: "9095"
  # If you want metrics enabled in cilium-operator, set the port for
  # which the Cilium Operator will have their metrics exposed.
  # NOTE that this will open the port on the nodes where Cilium operator pod
  # is scheduled.
  operator-prometheus-serve-addr: ":6942"
  enable-metrics: "true"

  # Enable IPv4 addressing. If enabled, all endpoints are allocated an IPv4
  # address.
  enable-ipv4: "true"

  # Enable IPv6 addressing. If enabled, all endpoints are allocated an IPv6
  # address.
  enable-ipv6: "false"
  # Users who wish to specify their own custom CNI configuration file must set
  # custom-cni-conf to "true", otherwise Cilium may overwrite the configuration.
  custom-cni-conf: "false"
  enable-bpf-clock-probe: "true"
  # If you want cilium monitor to aggregate tracing for packets, set this level
  # to "low", "medium", or "maximum". The higher the level, the less packets
  # that will be seen in monitor output.
  monitor-aggregation: medium

  # The monitor aggregation interval governs the typical time between monitor
  # notification events for each allowed connection.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-interval: 5s

  # The monitor aggregation flags determine which TCP flags which, upon the
  # first observation, cause monitor notifications to be generated.
  #
  # Only effective when monitor aggregation is set to "medium" or higher.
  monitor-aggregation-flags: all
  # Specifies the ratio (0.0-1.0) of total system memory to use for dynamic
  # sizing of the TCP CT, non-TCP CT, NAT and policy BPF maps.
  bpf-map-dynamic-size-ratio: "0.0025"
  # bpf-policy-map-max specifies the maximum number of entries in endpoint
  # policy map (per endpoint)
  bpf-policy-map-max: "16384"
  # bpf-lb-map-max specifies the maximum number of entries in bpf lb service,
  # backend and affinity maps.
  bpf-lb-map-max: "65536"
  # Pre-allocation of map entries allows per-packet latency to be reduced, at
  # the expense of up-front memory allocation for the entries in the maps. The
  # default value below will minimize memory usage in the default installation;
  # users who are sensitive to latency may consider setting this to "true".
  #
  # This option was introduced in Cilium 1.4. Cilium 1.3 and earlier ignore
  # this option and behave as though it is set to "true".
  #
  # If this value is modified, then during the next Cilium startup the restore
  # of existing endpoints and tracking of ongoing connections may be disrupted.
  # As a result, reply packets may be dropped and the load-balancing decisions
  # for established connections may change.
  #
  # If this option is set to "false" during an upgrade from 1.3 or earlier to
  # 1.4 or later, then it may cause one-time disruptions during the upgrade.
  preallocate-bpf-maps: "false"

  # Regular expression matching compatible Istio sidecar istio-proxy
  # container image names
  sidecar-istio-proxy-image: "cilium/istio_proxy"

  # Encapsulation mode for communication between nodes
  # Possible values:
  #   - disabled
  #   - vxlan (default)
  #   - geneve
  tunnel: disabled

  # Name of the cluster. Only relevant when building a mesh of clusters.
  cluster-name: default
  # Enables L7 proxy for L7 policy enforcement and visibility
  enable-l7-proxy: "true"

  # wait-bpf-mount makes init container wait until bpf filesystem is mounted
  wait-bpf-mount: "false"

  masquerade: "true"
  enable-bpf-masquerade: "true"

  enable-xt-socket-fallback: "true"
  install-iptables-rules: "true"

  auto-direct-node-routes: "true"
  enable-bandwidth-manager: "false"
  enable-local-redirect-policy: "false"
  kube-proxy-replacement:  "probe"
  kube-proxy-replacement-healthz-bind-address: ""
  enable-host-reachable-services: "true"
  enable-health-check-nodeport: "true"
  node-port-bind-protection: "true"
  enable-auto-protect-node-port-range: "true"
  node-port-mode: "dsr"
  bpf-lb-algorithm: "maglev"
  enable-session-affinity: "true"
  enable-endpoint-health-checking: "true"
  enable-health-checking: "true"
  enable-well-known-identities: "false"
  enable-remote-node-identity: "true"
  operator-api-serve-addr: "127.0.0.1:9234"
  # Enable Hubble gRPC service.
  enable-hubble: "true"
  # UNIX domain socket for Hubble server to listen to.
  hubble-socket-path:  "/var/run/cilium/hubble.sock"
  # Address to expose Hubble metrics (e.g. ":7070"). Metrics server will be disabled if this
  # field is not set.
  hubble-metrics-server: ":9091"
  # A space separated list of metrics to enable. See [0] for available metrics.
  #
  # https://github.com/cilium/hubble/blob/master/Documentation/metrics.md
  hubble-metrics:
    dns:query;ignoreAAAA
    drop
    tcp
    flow
    port-distribution
    icmp
    http
  # An additional address for Hubble server to listen to (e.g. ":4244").
  hubble-listen-address: ":4244"
  hubble-disable-tls: "false"
  hubble-tls-cert-file: /var/lib/cilium/tls/hubble/server.crt
  hubble-tls-key-file: /var/lib/cilium/tls/hubble/server.key
  hubble-tls-client-ca-files: /var/lib/cilium/tls/hubble/client-ca.crt
  ipam: "cluster-pool"
  cluster-pool-ipv4-cidr: "10.42.0.0/16"
  cluster-pool-ipv4-mask-size: "24"
  disable-cnp-status-updates: "true"
  native-routing-cidr: "10.42.0.0/16"
---
# Source: cilium/templates/hubble-ca-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ca-cert
  namespace: kube-system
data:
  ca.crt: |-
    -----BEGIN CERTIFICATE-----
    MIIDCTCCAfGgAwIBAgIRAJ9FuY7ZTSa7F+yfsVInozQwDQYJKoZIhvcNAQELBQAw
    HjEcMBoGA1UEAxMTaHViYmxlLWNhLmNpbGl1bS5pbzAeFw0yMDEyMjAwMDAxMTha
    Fw0yMzEyMjAwMDAxMThaMB4xHDAaBgNVBAMTE2h1YmJsZS1jYS5jaWxpdW0uaW8w
    ggEiMA0GCSqGSIb3DQEBAQUAA4IBDwAwggEKAoIBAQDqKWJWS7u8sTgBVuXDJpZy
    /dOw2q1lA2DxU49UYlLLXsULajomBCj4K2iOkei4qlw2ZeqMHsZM1+KCa3PulEuy
    t8cuwbHUmfWWDo0w/hcd7eX1/rVtYfOTQs3FgEKWJVYuV/yVmc/d1rcLc+yPpbuS
    r4Ayko8HhkUbGwrvYZ3o3dzublavScqMoARd2qKFIdmksV4SAAmLtlGr+rltHI9e
    JcjpEWmn2AbxBZmgJ7fLjmFrWNwytaiWzvIxuVQh6ZFyn+pltz9048kssFhpjcR5
    cZKSi3bMqvuyNQVU/5ImVBO6m2pihXsPUD6AO8EWCEUcaYUkUjIqQB5U9q7AegVP
    AgMBAAGjQjBAMA4GA1UdDwEB/wQEAwICpDAdBgNVHSUEFjAUBggrBgEFBQcDAQYI
    KwYBBQUHAwIwDwYDVR0TAQH/BAUwAwEB/zANBgkqhkiG9w0BAQsFAAOCAQEAQoCL
    HDcBo8yYbLP5ca7nebwe9WOobq6rt+eqYQRipu8QRzi5QMhjvlhxeGnkEun1eTKS
    yOofDpXw9VM7ehJVm0nlXvKM6vRzEKUYgPCGPSifB1SioVTmLjkK+QTIobWOpgLm
    yett1c+3zwNJE/5A31EPvOMaw4cRpfCt4JNX0n6aqxqmeYkmLaEi17KC+X3t4EzA
    yJ2UZOGg4KKe3+JEM4KoSRCTRC/L+k5fo8bzoyqvrFU+YzMtQCB74PH9Y/ab4M7X
    Rc2AjV8mU8OckCkr9UwOhW6eoJ3TU5WSZGMtGDW9FCG3d009Z5CE1C5S2I5zywob
    Wmf7wxWMPpQkliiP1w==
    -----END CERTIFICATE-----
---
# Source: cilium/templates/hubble-relay-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-relay-config
  namespace: kube-system
data:
  config.yaml: |
    peer-service: unix:///var/run/cilium/hubble.sock
    listen-address: :4245
    dial-timeout: 
    retry-timeout: 
    sort-buffer-len-max: 
    sort-buffer-drain-timeout: 
    tls-client-cert-file: /var/lib/hubble-relay/tls/client.crt
    tls-client-key-file: /var/lib/hubble-relay/tls/client.key
    tls-hubble-server-ca-files: /var/lib/hubble-relay/tls/hubble-server-ca.crt
    disable-server-tls: true
---
# Source: cilium/templates/hubble-ui-configmap.yaml
apiVersion: v1
kind: ConfigMap
metadata:
  name: hubble-ui-envoy
  namespace: kube-system
data:
  envoy.yaml: |
    static_resources:
      listeners:
        - name: listener_hubble_ui
          address:
            socket_address:
              address: 0.0.0.0
              port_value: 8081
          filter_chains:
            - filters:
                - name: envoy.filters.network.http_connection_manager
                  config:
                    codec_type: auto
                    stat_prefix: ingress_http
                    route_config:
                      name: local_route
                      virtual_hosts:
                        - name: local_service
                          domains: ['*']
                          routes:
                            - match:
                                prefix: '/api/'
                              route:
                                cluster: backend
                                max_grpc_timeout: 0s
                                prefix_rewrite: '/'
                            - match:
                                prefix: '/'
                              route:
                                cluster: frontend
                          cors:
                            allow_origin_string_match:
                              - prefix: '*'
                            allow_methods: GET, PUT, DELETE, POST, OPTIONS
                            allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout
                            max_age: '1728000'
                            expose_headers: grpc-status,grpc-message
                    http_filters:
                      - name: envoy.filters.http.grpc_web
                      - name: envoy.filters.http.cors
                      - name: envoy.filters.http.router
      clusters:
        - name: frontend
          connect_timeout: 0.25s
          type: strict_dns
          lb_policy: round_robin
          hosts:
            - socket_address:
                address: 127.0.0.1
                port_value: 8080
        - name: backend
          connect_timeout: 0.25s
          type: logical_dns
          lb_policy: round_robin
          http2_protocol_options: {}
          hosts:
            - socket_address:
                address: 127.0.0.1
                port_value: 8090
---
# Source: cilium/templates/cilium-agent-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium
rules:
- apiGroups:
  - networking.k8s.io
  resources:
  - networkpolicies
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - namespaces
  - services
  - nodes
  - endpoints
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  - pods
  - pods/finalizers
  verbs:
  - get
  - list
  - watch
  - update
  - delete
- apiGroups:
  - ""
  resources:
  - nodes
  verbs:
  - get
  - list
  - watch
  - update
- apiGroups:
  - ""
  resources:
  - nodes
  - nodes/status
  verbs:
  - patch
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  # Deprecated for removal in v1.10
  - create
  - list
  - watch
  - update

  # This is used when validating policies in preflight. This will need to stay
  # until we figure out how to avoid "get" inside the preflight, and then
  # should be removed ideally.
  - get
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  verbs:
  - '*'
---
# Source: cilium/templates/cilium-operator-clusterrole.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: cilium-operator
rules:
- apiGroups:
  - ""
  resources:
  # to automatically delete [core|kube]dns pods so that are starting to being
  # managed by Cilium
  - pods
  verbs:
  - get
  - list
  - watch
  - delete
- apiGroups:
  - discovery.k8s.io
  resources:
  - endpointslices
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - ""
  resources:
  # to perform the translation of a CNP that contains `ToGroup` to its endpoints
  - services
  - endpoints
  # to check apiserver connectivity
  - namespaces
  verbs:
  - get
  - list
  - watch
- apiGroups:
  - cilium.io
  resources:
  - ciliumnetworkpolicies
  - ciliumnetworkpolicies/status
  - ciliumnetworkpolicies/finalizers
  - ciliumclusterwidenetworkpolicies
  - ciliumclusterwidenetworkpolicies/status
  - ciliumclusterwidenetworkpolicies/finalizers
  - ciliumendpoints
  - ciliumendpoints/status
  - ciliumendpoints/finalizers
  - ciliumnodes
  - ciliumnodes/status
  - ciliumnodes/finalizers
  - ciliumidentities
  - ciliumidentities/status
  - ciliumidentities/finalizers
  - ciliumlocalredirectpolicies
  - ciliumlocalredirectpolicies/status
  - ciliumlocalredirectpolicies/finalizers
  verbs:
  - '*'
- apiGroups:
  - apiextensions.k8s.io
  resources:
  - customresourcedefinitions
  verbs:
  - create
  - get
  - list
  - update
  - watch
# For cilium-operator running in HA mode.
#
# Cilium operator running in HA mode requires the use of ResourceLock for Leader Election
# between mulitple running instances.
# The preferred way of doing this is to use LeasesResourceLock as edits to Leases are less
# common and fewer objects in the cluster watch "all Leases".
# The support for leases was introduced in coordination.k8s.io/v1 during Kubernetes 1.14 release.
# In Cilium we currently don't support HA mode for K8s version < 1.14. This condition make sure
# that we only authorize access to leases resources in supported K8s versions.
- apiGroups:
  - coordination.k8s.io
  resources:
  - leases
  verbs:
  - create
  - get
  - update
---
# Source: cilium/templates/hubble-relay-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-relay
rules:
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/hubble-ui-clusterrole.yaml
kind: ClusterRole
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
rules:
  - apiGroups:
      - networking.k8s.io
    resources:
      - networkpolicies
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - ""
    resources:
      - componentstatuses
      - endpoints
      - namespaces
      - nodes
      - pods
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apiextensions.k8s.io
    resources:
      - customresourcedefinitions
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - cilium.io
    resources:
      - "*"
    verbs:
      - get
      - list
      - watch
---
# Source: cilium/templates/cilium-agent-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium
subjects:
- kind: ServiceAccount
  name: cilium
  namespace: kube-system
---
# Source: cilium/templates/cilium-operator-clusterrolebinding.yaml
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: cilium-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cilium-operator
subjects:
- kind: ServiceAccount
  name: cilium-operator
  namespace: kube-system
---
# Source: cilium/templates/hubble-relay-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-relay
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-relay
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: hubble-relay
---
# Source: cilium/templates/hubble-ui-clusterrolebinding.yaml
kind: ClusterRoleBinding
apiVersion: rbac.authorization.k8s.io/v1
metadata:
  name: hubble-ui
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: hubble-ui
subjects:
- kind: ServiceAccount
  namespace: kube-system
  name: hubble-ui
---
# Source: cilium/templates/cilium-agent-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: cilium-agent
  namespace: kube-system
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: "9095"
  labels:
    k8s-app: cilium
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: envoy-metrics
    port: 9095
    protocol: TCP
    targetPort: envoy-metrics
  selector:
    k8s-app: cilium
---
# Source: cilium/templates/cilium-agent-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-metrics
  namespace: kube-system
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: "9091"
  labels:
    k8s-app: hubble
spec:
  clusterIP: None
  type: ClusterIP
  ports:
  - name: hubble-metrics
    port: 9091
    protocol: TCP
    targetPort: hubble-metrics
  selector:
    k8s-app: cilium
---
# Source: cilium/templates/hubble-relay-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-relay
  namespace: kube-system
  labels:
    k8s-app: hubble-relay
spec:
  type: ClusterIP
  selector:
    k8s-app: hubble-relay
  ports:
  - protocol: TCP
    port: 80
    targetPort: 4245
---
# Source: cilium/templates/hubble-ui-service.yaml
kind: Service
apiVersion: v1
metadata:
  name: hubble-ui
  labels:
    k8s-app: hubble-ui
  namespace: kube-system
spec:
  selector:
    k8s-app: hubble-ui
  ports:
    - name: http
      port: 80
      targetPort: 8081
  type: ClusterIP
---
# Source: cilium/templates/cilium-agent-daemonset.yaml
apiVersion: apps/v1
kind: DaemonSet
metadata:
  labels:
    k8s-app: cilium
  name: cilium
  namespace: kube-system
spec:
  selector:
    matchLabels:
      k8s-app: cilium
  updateStrategy:
    rollingUpdate:
      maxUnavailable: 2
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "9090"
        prometheus.io/scrape: "true"
        # This annotation plus the CriticalAddonsOnly toleration makes
        # cilium to be a critical pod in the cluster, which ensures cilium
        # gets priority scheduling.
        # https://kubernetes.io/docs/tasks/administer-cluster/guaranteed-scheduling-critical-addon-pods/
        scheduler.alpha.kubernetes.io/critical-pod: ""
      labels:
        k8s-app: cilium
    spec:
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: k8s-app
                operator: In
                values:
                - cilium
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        command:
        - cilium-agent
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 10
          # The initial delay for the liveness probe is intentionally large to
          # avoid an endless kill & restart cycle if in the event that the initial
          # bootstrapping takes longer than expected.
          initialDelaySeconds: 120
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9876
            scheme: HTTP
            httpHeaders:
            - name: "brief"
              value: "true"
          failureThreshold: 3
          initialDelaySeconds: 5
          periodSeconds: 30
          successThreshold: 1
          timeoutSeconds: 5
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_FLANNEL_MASTER_DEVICE
          valueFrom:
            configMapKeyRef:
              key: flannel-master-device
              name: cilium-config
              optional: true
        - name: CILIUM_FLANNEL_UNINSTALL_ON_EXIT
          valueFrom:
            configMapKeyRef:
              key: flannel-uninstall-on-exit
              name: cilium-config
              optional: true
        - name: CILIUM_CLUSTERMESH_CONFIG
          value: /var/lib/cilium/clustermesh/
        - name: CILIUM_CNI_CHAINING_MODE
          valueFrom:
            configMapKeyRef:
              key: cni-chaining-mode
              name: cilium-config
              optional: true
        - name: CILIUM_CUSTOM_CNI_CONF
          valueFrom:
            configMapKeyRef:
              key: custom-cni-conf
              name: cilium-config
              optional: true
        image: docker.io/cilium/cilium-dev:v1.9.0
        imagePullPolicy: IfNotPresent
        lifecycle:
          postStart:
            exec:
              command:
              - "/cni-install.sh"
              - "--enable-debug=false"
          preStop:
            exec:
              command:
              - /cni-uninstall.sh
        name: cilium-agent
        ports:
        - containerPort: 9090
          hostPort: 9090
          name: prometheus
          protocol: TCP
        - containerPort: 9095
          hostPort: 9095
          name: envoy-metrics
          protocol: TCP
        - containerPort: 9091
          hostPort: 9091
          name: hubble-metrics
          protocol: TCP
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
            - SYS_MODULE
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
        - mountPath: /var/run/cilium
          name: cilium-run
        - mountPath: /host/opt/cni/bin
          name: cni-path
        - mountPath: /host/etc/cni/net.d
          name: etc-cni-netd
        - mountPath: /var/lib/cilium/clustermesh
          name: clustermesh-secrets
          readOnly: true
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
          # Needed to be able to load kernel modules
        - mountPath: /lib/modules
          name: lib-modules
          readOnly: true
        - mountPath: /run/xtables.lock
          name: xtables-lock
        - mountPath: /var/lib/cilium/tls/hubble
          name: hubble-tls
          readOnly: true
      hostNetwork: true
      initContainers:
      - command:
        - /init-container.sh
        env:
        - name: CILIUM_ALL_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-state
              name: cilium-config
              optional: true
        - name: CILIUM_BPF_STATE
          valueFrom:
            configMapKeyRef:
              key: clean-cilium-bpf-state
              name: cilium-config
              optional: true
        - name: CILIUM_WAIT_BPF_MOUNT
          valueFrom:
            configMapKeyRef:
              key: wait-bpf-mount
              name: cilium-config
              optional: true
        image: docker.io/cilium/cilium-dev:v1.9.0
        imagePullPolicy: IfNotPresent
        name: clean-cilium-state
        securityContext:
          capabilities:
            add:
            - NET_ADMIN
          privileged: true
        volumeMounts:
        - mountPath: /sys/fs/bpf
          name: bpf-maps
          mountPropagation: HostToContainer
        - mountPath: /var/run/cilium
          name: cilium-run
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
      restartPolicy: Always
      priorityClassName: system-node-critical
      serviceAccount: cilium
      serviceAccountName: cilium
      terminationGracePeriodSeconds: 1
      tolerations:
      - operator: Exists
      volumes:
        # To keep state between restarts / upgrades
      - hostPath:
          path: /var/run/cilium
          type: DirectoryOrCreate
        name: cilium-run
        # To keep state between restarts / upgrades for bpf maps
      - hostPath:
          path: /sys/fs/bpf
          type: DirectoryOrCreate
        name: bpf-maps
      # To install cilium cni plugin in the host
      - hostPath:
          path:  /opt/cni/bin
          type: DirectoryOrCreate
        name: cni-path
        # To install cilium cni configuration in the host
      - hostPath:
          path: /etc/cni/net.d
          type: DirectoryOrCreate
        name: etc-cni-netd
        # To be able to load kernel modules
      - hostPath:
          path: /lib/modules
        name: lib-modules
        # To access iptables concurrently with other processes (e.g. kube-proxy)
      - hostPath:
          path: /run/xtables.lock
          type: FileOrCreate
        name: xtables-lock
        # To read the clustermesh configuration
      - name: clustermesh-secrets
        secret:
          defaultMode: 420
          optional: true
          secretName: cilium-clustermesh
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
      - name: hubble-tls
        projected:
          sources:
          - secret:
              name: hubble-server-certs
              items:
                - key: tls.crt
                  path: server.crt
                - key: tls.key
                  path: server.key
              optional: true
          - configMap:
              name: hubble-ca-cert
              items:
                - key: ca.crt
                  path: client-ca.crt
              optional: true
---
# Source: cilium/templates/cilium-operator-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.cilium/app: operator
    name: cilium-operator
  name: cilium-operator
  namespace: kube-system
spec:
  # We support HA mode only for Kubernetes version > 1.14
  # See docs on ServerCapabilities.LeasesResourceLock in file pkg/k8s/version/version.go
  # for more details.
  replicas: 1
  selector:
    matchLabels:
      io.cilium/app: operator
      name: cilium-operator
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        prometheus.io/port: "6942"
        prometheus.io/scrape: "true"
      labels:
        io.cilium/app: operator
        name: cilium-operator
    spec:
      # In HA mode, cilium-operator pods must not be scheduled on the same
      # node as they will clash with each other.
      affinity:
        podAntiAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
              - key: io.cilium/app
                operator: In
                values:
                - operator
            topologyKey: kubernetes.io/hostname
      containers:
      - args:
        - --config-dir=/tmp/cilium/config-map
        - --debug=$(CILIUM_DEBUG)
        command:
        - cilium-operator-generic
        env:
        - name: K8S_NODE_NAME
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: spec.nodeName
        - name: CILIUM_K8S_NAMESPACE
          valueFrom:
            fieldRef:
              apiVersion: v1
              fieldPath: metadata.namespace
        - name: CILIUM_DEBUG
          valueFrom:
            configMapKeyRef:
              key: debug
              name: cilium-config
              optional: true
        image: cilium/operator-dev:v1.9.0
        imagePullPolicy: IfNotPresent
        name: cilium-operator
        ports:
        - containerPort: 6942
          hostPort: 6942
          name: prometheus
          protocol: TCP
        livenessProbe:
          httpGet:
            host: '127.0.0.1'
            path: /healthz
            port: 9234
            scheme: HTTP
          initialDelaySeconds: 60
          periodSeconds: 10
          timeoutSeconds: 3
        volumeMounts:
        - mountPath: /tmp/cilium/config-map
          name: cilium-config-path
          readOnly: true
      hostNetwork: true
      restartPolicy: Always
      priorityClassName: system-cluster-critical
      serviceAccount: cilium-operator
      serviceAccountName: cilium-operator
      tolerations:
      - operator: Exists
      volumes:
        # To read the configuration from the config map
      - configMap:
          name: cilium-config
        name: cilium-config-path
---
# Source: cilium/templates/hubble-relay-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: hubble-relay
  labels:
    k8s-app: hubble-relay
  namespace: kube-system
spec:

  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-relay
  strategy:
    rollingUpdate:
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      labels:
        k8s-app: hubble-relay
    spec:
      affinity:
        podAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchExpressions:
                - key: "k8s-app"
                  operator: In
                  values:
                    - cilium
            topologyKey: "kubernetes.io/hostname"
      containers:
        - name: hubble-relay
          image: docker.io/cilium/hubble-relay-dev:v1.9.0
          imagePullPolicy: IfNotPresent
          command:
            - hubble-relay
          args:
            - serve
          ports:
            - name: grpc
              containerPort: 4245
          readinessProbe:
            tcpSocket:
              port: grpc
          livenessProbe:
            tcpSocket:
              port: grpc
          volumeMounts:
          - mountPath: /var/run/cilium
            name: hubble-sock-dir
            readOnly: true
          - mountPath: /etc/hubble-relay
            name: config
            readOnly: true
          - mountPath: /var/lib/hubble-relay/tls
            name: tls
            readOnly: true
      restartPolicy: Always
      serviceAccount: hubble-relay
      serviceAccountName: hubble-relay
      terminationGracePeriodSeconds: 0
      volumes:
      - configMap:
          name: hubble-relay-config
          items:
          - key: config.yaml
            path: config.yaml
        name: config
      - hostPath:
          path: /var/run/cilium
          type: Directory
        name: hubble-sock-dir
      - projected:
          sources:
          - secret:
              name: hubble-relay-client-certs
              items:
                - key: tls.crt
                  path: client.crt
                - key: tls.key
                  path: client.key
          - configMap:
              name: hubble-ca-cert
              items:
                - key: ca.crt
                  path: hubble-server-ca.crt
        name: tls
---
# Source: cilium/templates/hubble-ui-deployment.yaml
kind: Deployment
apiVersion: apps/v1
metadata:
  namespace: kube-system
  labels:
    k8s-app: hubble-ui
  name: hubble-ui
spec:
  replicas: 1
  selector:
    matchLabels:
      k8s-app: hubble-ui
  template:
    metadata:
      labels:
        k8s-app: hubble-ui
    spec:
      securityContext:
        runAsUser: 1001
      serviceAccount: hubble-ui
      serviceAccountName: hubble-ui
      containers:
        - name: frontend
          image: "docker.io/mcfio/hubble-ui-dev:v0.7.3"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8080
              name: http
          resources:
            {}
        - name: backend
          image: "docker.io/mcfio/hubble-ui-backend-dev:v0.7.3"
          imagePullPolicy: IfNotPresent
          env:
            - name: EVENTS_SERVER_PORT
              value: "8090"
            - name: FLOWS_API_ADDR
              value: "hubble-relay:80"
          ports:
            - containerPort: 8090
              name: grpc
          resources:
            {}
        - name: proxy
          image: "docker.io/envoyproxy/envoy:v1.16.1"
          imagePullPolicy: IfNotPresent
          ports:
            - containerPort: 8081
              name: http
          resources:
            {}
          command: ["envoy"]
          args:
            [
              "-c",
              "/etc/envoy.yaml",
              "-l",
              "info"
            ]
          volumeMounts:
            - name: hubble-ui-envoy-yaml
              mountPath: /etc/envoy.yaml
              subPath: envoy.yaml
      volumes:
        - name: hubble-ui-envoy-yaml
          configMap:
            name: hubble-ui-envoy
